/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gazepointdataprocessor;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Scanner;

/**
 * This class is used to process data from fixation file generated by eye gaze
 * tracker.
 *
 * @author Thien Dinh
 */
public class GazePointDataProcessor {

    // Indices to be kept.
    private int[] keepingIndices;

    // Title of indices.
    private ArrayList<String> titles;

    // Processed data.
    private LinkedList<ArrayList<Double>> data;

    /**
     * Constructor with default keeping indices.
     */
    public GazePointDataProcessor() {
        keepingIndices = new int[]{
            5, 6, 8
        };
        titles = new ArrayList<>(keepingIndices.length);
        data = new LinkedList<>();
    }

    public String showKeepingIndices() {
        return Arrays.toString(keepingIndices);
    }

    /**
     * @param args a directory that contains cvs files.
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        // Get all files from this directory.
        File directory = new File(args[0]);
        File files[] = directory.listFiles();
        File[] formattedCsvFiles = new File[files.length];
        int index = 0;

        // Preprocess data: Select desired columns.
        for (int i = 0; i < files.length; i++) {
            GazePointDataProcessor gpProcessor = new GazePointDataProcessor();
            File dataFile = files[i];
            //System.out.println(dataFile.getName());
            processFile(dataFile, gpProcessor);
            String[] fileName = dataFile.getName().split("\\.");
            // Make sure the file name does not contain any dot character. If not,
            // it will generate index out of bound or the new name is not correct.
            String newName = fileName[0] + "_processed." + fileName[1];
            File outFile = new File(newName);
            formattedCsvFiles[index++] = outFile;
            writeFile(gpProcessor, outFile);
        }

        // After having all the desired csv file, combine then into a single training data file.
        TrainingDataGenerator tdGenerator = new TrainingDataGenerator(formattedCsvFiles);
        tdGenerator.generateUnifiedDataFile();
    }

    /**
     * Read the file and parse the data.
     *
     * @param input a csv file.
     */
    public static void processFile(File input, GazePointDataProcessor gpProcessor) throws FileNotFoundException {
        Scanner in = new Scanner(input);
        String line;
        // Get the titles.
        if (in.hasNextLine()) {
            line = in.nextLine();
            String[] cols = line.split(",");
            for (int i = 0; i < gpProcessor.keepingIndices.length; i++) {
                gpProcessor.titles.add(cols[gpProcessor.keepingIndices[i]]);
            }
        }

        // Begin extract data.
        while (in.hasNextLine()) {
            line = in.nextLine();
            String[] cols = line.split(",");
            ArrayList<Double> dataLine = new ArrayList<>(gpProcessor.keepingIndices.length);
            for (int i = 0; i < gpProcessor.keepingIndices.length; i++) {
                Double value = Double.valueOf(cols[gpProcessor.keepingIndices[i]]);
                dataLine.add(value);
            }
            if ((dataLine.get(0) > 0 && dataLine.get(0) < 1
                    || Math.abs(dataLine.get(0) - 0.0) < 1E-14 || Math.abs(dataLine.get(0) - 1.0) < 1E-14)
                    && (dataLine.get(1) > 0 && dataLine.get(1) < 1
                    || Math.abs(dataLine.get(1) - 0.0) < 1E-14 || Math.abs(dataLine.get(1) - 1.0) < 1E-14)
                    //                    && (dataLine.get(3) > 0 && dataLine.get(3) < 1
                    //                    || Math.abs(dataLine.get(3) - 0.0) < 1E-14 || Math.abs(dataLine.get(3) - 1.0) < 1E-14)
                    //                    && (dataLine.get(4) > 0 && dataLine.get(4) < 1
                    //                    || Math.abs(dataLine.get(4) - 0.0) < 1E-14 || Math.abs(dataLine.get(4) - 1.0) < 1E-14)
                    && (dataLine.get(2) > 0)) {
                // Add into our linked list.
                gpProcessor.data.add(dataLine);
            }
        }
        // Close the file.
        in.close();
    }

    /**
     * Write the new cvs file.
     *
     * @param gpProcessor
     */
    public static void writeFile(GazePointDataProcessor gpProcessor, File outputFile) throws FileNotFoundException {
        PrintWriter writer = new PrintWriter(outputFile);
        // Write the titles.
        for (int i = 0; i < gpProcessor.titles.size(); i++) {
            writer.print(gpProcessor.titles.get(i));
            if (i != gpProcessor.titles.size() - 1) {
                writer.print(",");
            } else {
                writer.println();
            }
        }

        // Write the data.
        ListIterator<ArrayList<Double>> iterator = gpProcessor.data.listIterator();
        while (iterator.hasNext()) {
            ArrayList<Double> dataLine = iterator.next();
            for (int i = 0; i < dataLine.size(); i++) {
                writer.print(dataLine.get(i));
                if (i != dataLine.size() - 1) {
                    writer.print(",");
                } else {
                    writer.println();
                }
            }
        }

        // After writing data, close the file.
        writer.close();
    }

}
